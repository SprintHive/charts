{{- if eq .Values.ClusterProfile "production"}}
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: "{{ printf "%s-%s-%s" .Values.Name .Values.Production.Data.Role .Release.Name | trunc 24 }}"
  labels:
    heritage: {{.Release.Service | quote }}
    release: {{.Release.Name | quote }}
    chart: "{{.Chart.Name}}-{{.Chart.Version}}"
    component: {{.Values.Component}}
    role: {{.Values.Production.Data.Role}}
spec:
  replicas: {{.Values.Production.Data.Replicas }}
  serviceName: "{{.Values.Name }}-{{.Values.Production.Data.Role}}"
  template:
    metadata:
      labels:
        component: {{.Values.Component}}
        role: {{.Values.Production.Data.Role}}
    spec:
      serviceAccountName: {{.Values.Component}}
{{ include "init_containers" . | indent 6 }}
      containers:
      - name: {{.Values.Name}}-{{.Values.Production.Data.Role}}
        securityContext:
          privileged: false
          capabilities:
            add:
            - IPC_LOCK
            - SYS_RESOURCE
        image: {{.Values.Image}}
        imagePullPolicy: {{.Values.ImagePullPolicy}}
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: CLUSTER_NAME
          value: {{.Values.ClusterName}}
        - name: NODE_NAME_PREFIX
          value: {{.Values.Name}}-{{.Values.Production.Data.Role}}
        - name: DISCOVERY_SERVICE
          value: {{.Values.DiscoveryService.Name}}
        - name: NODE_MASTER
          value: "false"
        - name: NODE_INGEST
          value: "true"
        - name: NODE_DATA
          value: "true"
        - name: HTTP_ENABLE
          value: "false"
        - name: ES_JAVA_OPTS
          value: {{.Values.Production.Data.JavaOpts}}
        - name: ES_PLUGINS_INSTALL
          value: {{ template "plugins" . }}
        {{- if eq .Values.SearchGuard.Enabled true}}
        - name: TRANSPORT_TLS_KEY_PASS
          valueFrom:
            secretKeyRef:
              name: es-{{.Values.Production.Data.Role}}-transport-tls
              key: key-password
        - name: HTTPS_TLS_KEY_PASS
          value: ""
        {{- end}}
        ports:
        - containerPort: 9300
          name: transport
          protocol: TCP
        resources:
          requests:
            cpu: "{{.Values.Production.Data.CpuRequests}}"
            memory: "{{.Values.Production.Data.MemoryRequests}}"
          limits:
            cpu: "{{.Values.Production.Data.CpuLimits}}"
            memory: "{{.Values.Production.Data.MemoryLimits}}"
        livenessProbe:
          tcpSocket:
            port: 9300
          initialDelaySeconds: {{.Values.Production.Data.LivenessTest.InitialDelaySecs}}
          timeoutSeconds: {{.Values.Production.Data.LivenessTest.TimeoutSecs}}
        volumeMounts:
        - name: storage
          mountPath: /data
        - name: config-dir
          mountPath: /elasticsearch/config
      tolerations:
        - key: "type"
          operator: "Equal"
          value: "esnode"
          effect: "NoExecute"
      volumes:
      {{- if ne .Values.Production.Data.VolumeClaimTemplate.Enabled true}}
      - name: storage
        emptyDir:
          medium: ""
      {{- end}}
      - name: config-dir
        emptyDir:
          medium: ""
      - name: config-configmap
        configMap:
          name: es-config
  {{- if eq .Values.Production.Data.VolumeClaimTemplate.Enabled true}}
  volumeClaimTemplates:
    - metadata:
        name: storage
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: {{.Values.Production.Data.VolumeClaimTemplate.StorageClass}}
        resources:
          requests:
            storage: {{.Values.Production.Data.VolumeClaimTemplate.RequestedStorage}}
  {{- end}}
{{- end}}
